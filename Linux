------------------------------------------------------------
Individual packages (.dpkg,.rpm)
------------------------------------------------------------
											.DEB
											.RPM
installing using debian or redhat package manager, dependencies will not be downloaded, for example
if iam installing tomcat8 using .deb package, for tocat8 to work, we need a dependency called java to be installed but what .deb will do is it will install
only the .deb tocat8 because the .deb package contains only tomcat8
https://www.tecmint.com/dpkg-command-examples/
											man dpkg | less
											dpkg --print-architecture
											man ls
											man scp

											wget https://packages.chef.io/files/stable/chefdk/4.3.13/ubuntu/16.04/chefdk_4.3.13-1_amd64.deb
											dpkg -i chefdk_4.3.13-1_amd64.deb
											dpkg -i (-i is for installation)
											dpkg -r (-r is for uninstallation)
											dpkg -l (to list all the installed packages)

											whereis chef
														chef: /usr/bin/chef /opt/chefdk/bin/chef

											echo $PATH	-> path variable
														/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
														ls -lart /usr/bin | grep chef ----> SIM LINK
																						chef -> /opt/chefdk/bin/chef
											-------------------------------------------------------------------------------------------------------
https://www.tecmint.com/20-practical-examples-of-rpm-commands-in-linux/
											man rpm
											rpm ivh https://packages.chef.io/files/stable/chefdk/4.3.13/el/8/chefdk-4.3.13-1.el7.x86_64.rpm
											rpm -ql chef
											whereis chef
											echo $PATH
											ls -lart /usr/bin | grep chef
																		 chef-solo -> /opt/chef/bin/chef-solo
sim link is nothing but a shortcut
											rpm -qpr <.rpm> to check dependencies for .rpm package
											rpm -q | grep git - to check git installation


---------------------------------------------------------------------------------------
Package Manage apt-get(debian based systems), yum(redhat based systems), snap(for both)
---------------------------------------------------------------------------------------
											apt-get install

						repository			cd /etc/apt
											cat source-list ----> this the repository location to download the packages from
											sudo add-apt-repository https://ahahjkalsnknsdn.com ---> to add a repository to search for softwares

											apt-get update -y
											apt-get update && apt-get install tomcat8
											apt-get install -y
											apt-cache search git
											apt-cache madison git
											apt-cache show git		after installation it will show
											echo $PATH
											ls -la /usr/bin | grep git
simlink will show

											dpkg -l | grep git
											dpkg -l | grep python


					repository		cd /etc/yum/yum.rep.d
									cat centos-sources.repo
									yum update -y
									yum install
									yum search


---------------------------------------------------------------------------------------
tarballs nothing but archive files - tar.gz
									 tar -xvf (unzip tarfile)
.7z
											wget https://**************.tar.gz
											tar -xvf <name> - unzip
----------------------------------------------------------------------------------------
environmental variable (path)
						1. system variable called path variable
						2. user variables
to add the crome browser to the environment variable
right click my computer -> properties -> advance system -> enviroment variable
no need to add the chrome.ece, just add the chrome directory (C:\Program Files (x86)\Google) --> refreshenv.cmd

											java -> java_home
											maven -> maven_home
											set
Environment Commands:
  show-environment                Dump environment
  set-environment NAME=VALUE...   Set one or more environment variables
  unset-environment NAME...       Unset one or more environment variables
  import-environment [NAME...]    Import all or some environment variables

--------------------------------------------------------------
DEAMONS OR SERVICES
--------------------------------------------------------------
service of 2 types
				1. system services - ping - whenever you ping request
				2. application services - apache2 always should be running
2 modes of running all applications that if
				1. foreground (ping,u can see the results)
				2. background
deamon has to run all the time example: webservers, database servers etc.

ping command  --> ping -c4 google.com - which means 4 times
adding user --> 			adduser rajesh
reset userpasswd  -->		sudo passwd jenkins
checking groups --> 		cat /etc/group
adding user to group --> 	sudo usermod -aG tomcat8 rajesh
know user group --> 		cat /etc/group | grep tomcat8
add user to sudo group -->	visudo
							# Allow members of group sudo to execute any command
							%sudo   ALL=(ALL:ALL) ALL
							jenkins ALL=(ALL:ALL) NOPASSWD:ALL
user password authen -->	vi /etc/ssh/sshd_config
							# To disable tunneled clear text passwords, change to no here!
							PasswordAuthentication no
	

							systemctl stop apache2
							systemctl start apache2
							systemctl restart apache2
							systemctl reload apache2
							systemctl enable apache2  - whenever system restarts automatically this service will start.
							systemctl status apache2
							systemctl is-enabled apache2 - to know service status
							systemctl list-dependencies apache2 -  to know all dependencies for service

to work systemctl command there is a service called systemd, this deamon service should work all the time other wise systemctl will not work
							systemctl list-units --all
							systemctl list-units --type=service --state=running
							systemctl list-units --type=service --state=inactive

whenever we enable the service using systemctl enable apache2, a symlink will be created from
																							/etc/systemd/system/multi-user.target.wants	to /usr/lib......
													to check this we can use
																			ls -la /usr/bin or lib/ | grep apache2

CREATING JAVA APPLICATION AS A SERVICES

all services are under this path 	/etc/systemd/system/multi-user.target.wants
									systemctl list-units --all
									systemctl status mysql.service
										mysql.service - MySQL Community Server
			sim link					Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)
										Active: active (running) since Mon 2019-09-02 10:05:28 UTC; 3h 49min ago
										Main PID: 10479 (mysqld)
										Tasks: 27 (limit: 1152)
										CGroup: /system.slice/mysql.service
											   └─10479 /usr/sbin/mysqld --daemonize --pid-file=/run/mysqld/mysqld.pid


Copy file from local machine to remote machine using SCP command
scp -i .\iam.pem 'C:\Users\user\Downloads\spring-petclinic-2.1.0.BUILD-SNAPSHOT.jar' ubuntu@52.34.0.42:/home/ubuntu
cp -r <file.rar> \home\rajesh   -  to copy the file

[Unit]
Description=A Spring Boot petclinic application
After=syslog.target

[Service]
User=ubuntu
ExecStart=/home/ubuntu/spring-petclinic.jar SuccessExitStatus=143

[Install]
WantedBy=multi-user.target


mv oldname newname  --> rename the file
du -sh /.m2	-->	to check the size of the folder

firewall-cmd --zone=public --add-port=8080/tcp -permenant
firewall-cmd --zone=public --add-service=http -permenant
firewall-cmd --reload


ssh username@ipaddress
ssh -i pemfile.pem username@ipadress

ps
ls -lart
systemctl list-units --type=service --state=running
systemctl status mysql.service
systemctl status nginx.service

cat /etc/passwd  - login shell
sudo -i		to become a root user
cd ~		to go to the home directory

-----If you want to know what is your login shell-------
vi /etc/passwd	->	usr/sbin/nologin	-	which means user cannot login
					bin/bash

------ZSH Installation--------------------------
centos	-	sudo yum install zsh -y
ubuntu	-	sudo apt-get install zsh -y
	root@ip-172-31-20-238:~# zsh
	ip-172-31-20-238# ps $$
	PID TTY      STAT   TIME COMMAND
	13208 pts/0    S      0:00 zsh
	ip-172-31-20-238#

	ip-172-31-20-238# bash
	root@ip-172-31-20-238:~# ps $$
	PID TTY      STAT   TIME COMMAND
	13212 pts/0    S      0:00 bash
	root@ip-172-31-20-238:~#

ps $$
 PID TTY      STAT   TIME COMMAND
 1921 pts/0    S      0:00 -bash
 
----------------------------------------------------
				SHELL SCRIPTING
----------------------------------------------------
what is shell ?  bash shell - born again shell
what is variable ?

kernel - shell will communicate to the kernel.
linux has something called kernel which is like OS
majority of the time we use bash shell which is called BORN AGAIN SHELL

shell - bash / zsh (sudo apt-get install zsh -y | yum install zsh -y)
secure shell - ssh (SSH SERVER - SSH CLIENT)

to know the default shell or login shell - 
ps $$		
or
cat /etc/passwd - ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
	                     X - means the password
						   userid
						         groupid
nano /etc/passwd - 
vi /etc/passwd			- https://openvim.com/ vim usage url
---------------------------------------------------------------------------------------------------
				stream		file decsription		symbol
Input stream	keyboard		0						<
Output stream	monitor			1						>		redirect the standard output to the
error stream	monitor			2						>		
---------------------------------------------------------------------------------------------------
ubuntu@ip-172-31-20-176:~$ echo helloo
helloo
ubuntu@ip-172-31-20-176:~$
----------------------------
ubuntu@ip-172-31-20-176:~$ echo helloo 1> /home/ubuntu/1.txt    or echo helloo > /home/ubuntu/1.txt
ubuntu@ip-172-31-20-176:~$ ls -la
total 80
drwxr-xr-x 5 ubuntu ubuntu  4096 Sep 10 07:27 .
drwxr-xr-x 5 root   root    4096 Sep 10 06:53 ..
-rw-r--r-- 1 ubuntu ubuntu   220 Apr  4  2018 .bash_logout
-rw-r--r-- 1 ubuntu ubuntu  3771 Apr  4  2018 .bashrc
drwx------ 2 ubuntu ubuntu  4096 Sep 10 06:27 .cache
drwx------ 3 ubuntu ubuntu  4096 Sep 10 06:27 .gnupg
-rw-r--r-- 1 ubuntu ubuntu   807 Apr  4  2018 .profile
drwx------ 2 ubuntu ubuntu  4096 Sep 10 06:23 .ssh
-rw-r--r-- 1 ubuntu ubuntu     0 Sep 10 06:46 .sudo_as_admin_successful
-rw-rw-r-- 1 ubuntu ubuntu 42275 Sep 10 06:52 .zcompdump
-rw-rw-r-- 1 ubuntu ubuntu     7 Sep 10 07:27 1.txt
ubuntu@ip-172-31-20-176:~$ cat 1.txt
helloo
ubuntu@ip-172-31-20-176:~$

whenever we want to overwrite the files called as cloberring, (set -o noclobber)
echo heloo >heloo.txt
set -o noclobber
echo heloo rajesh >heloo.txt
-bash: heloo.txt: cannot overwrite existing file
set +o noclobber

example:
			$ echo "Hello, world" >file.txt
			$ cat file.txt
			Hello, world
			$ echo "This will overwrite the first greeting." >file.txt
			$ cat file.txt
			This will overwrite the first greeting.
			$ set -o noclobber
			$ echo "Can we overwrite it again?" >file.txt
			-bash: file.txt: cannot overwrite existing file
			$ echo "But we can use the >| operator to ignore the noclobber." >|file.txt
			$ cat file.txt # Successfully overwrote the contents of file.txt using the >| operator
			But we can use the >| operator to ignore the noclobber.
			$ set +o noclobber # Changes setting back

change of ownership commands
sudo chown ubuntu:filename			- user
sudo chown ubuntu:root filename 	- user:group	
---------------------------------------------------------------------------------------------------
COMMANDS		POSITIONAL ARGUMENTS	
ls				/home/ubuntu  

COMMANDS		NAMED ARGUMENTS	


COMMANDS are called as executables
ping
ls

ARGUMENTS are of 2 types, positional arguments & named arguments

-----------------------------------------------------------------------------------------------------
what is a shell script ?

backup the files with some conditions
	firstly we will create a text files with the following
		text file	
			shell commands
			conditions
			repetitions
			arguments

- 	rw-    rw-   r-- 1 ubuntu ubuntu   61 Sep 10 09:08 basic.sh
	owner  group user
r-4
w-2
x-1

chmod 777
chmod 400

---------------------------------------------------------------------------------------------------
INTERPRITOR	#!/bin/bash
http://www.theunixschool.com/2011/01/positional-parameters-in-shell-script.html
---------------------------------------------------------------------------------------------------
		
hashbang /bin/bash			#!/bin/bash		echo "heloo world"
shebang	 /usr/bin/bash

[root@gpr ~]# cat cmd
#!/usr/bin/ksh

Let us see this with an example:
echo "The total no of args are: $#"
echo "The script name is : $0"
echo "The first argument is : $1"
echo "The second argument is: $2"
echo "The total argument list is: $*"
echo "The total argument singlevalue is: $@"
OUTPUT
[root@gpr ~]# ./cmd 1 2 3 4
The total no of args are: 4
The script name is : ./cmd
The first argument is : 1
The second argument is: 2
The total argument list is: 1 2 3 4
[root@gpr ~]#

---------------------------------------------------------------------------------------------------
ENVIRONMENT VARIABLES or SHELL VARIABLES (variables-it has a memory location that has some value)
---------------------------------------------------------------------------------------------------
SHELL VARIABLES - also called as local variables

ENVIRONMENT VARIABLES

~	- which means i am in a directory
#	- which means i am a superuser

itemcount=10 	- this step is called initialization
echo $itemcount 
10

env or set

name='rajeshande'
echo $name

bash/
	name='rajeshande'
	export
	export name
				zsh/
					echo $name --> rajeshande
								--> name='rajeshbabuande'
									export name
									exit
	echo $name
	rajeshande
Example:
	month='september'
	year='2019'
	echo $month $year > /home/ubuntu/result.txt

video4.1 - 43mnt
SYSTEM ENVIRONMENT VARIABLES | USER ENVIRONMENT VARIABLES
/etc/profile
/etc/profile.d

creating enviroment variable ?
cd /etc/profile.
ls

cd /etc/bash.bashrc

				


